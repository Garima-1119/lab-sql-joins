use sakila; 
-- List the number of films per category.

SELECT 
    COUNT(f.film_id) AS number_of_film, 
    c.name AS category_name  
FROM 
    sakila.category AS c
JOIN 
    sakila.film_category AS fc ON c.category_id = fc.category_id
JOIN 
    sakila.film AS f ON fc.film_id = f.film_id 
GROUP BY 
    c.name
ORDER BY 
    number_of_film DESC;
    
    -- Retrieve the store ID,city and country for each store. 
    SELECT 
    s.store_id, 
    co.country AS country_name, 
    c.city AS city_name
FROM 
    sakila.store AS s
JOIN 
    sakila.address AS a 
    ON s.address_id = a.address_id
JOIN 
    sakila.city AS c 
    ON a.city_id = c.city_id
JOIN 
    sakila.country AS co 
    ON c.country_id = co.country_id
ORDER BY 
    s.store_id ASC;
    
    -- calculate the total revenue generated by each store in dollars. 
    
    SELECT 
    s.store_id, 
    SUM(p.amount) AS total_revenue
FROM 
    sakila.store AS s
JOIN 
    sakila.staff AS st 
    ON s.store_id = st.store_id
JOIN 
    sakila.payment AS p 
    ON st.staff_id = p.staff_id
GROUP BY 
    s.store_id; 
    
    -- Determine the average running time of films for each category.
    SELECT avg(f.length) as running_time_film , c.name as category from sakila.film_category as fc
    join sakila.category as c 
    on fc.category_id = c.category_id
    join sakila.film as f
    on fc.film_id = f.film_id
    group by category 
    order by running_time_film DESC; 
     
     -- Bonus:Identify the film categories with the longest average running time.
    
    SELECT avg(f.length) as average_running_time , c.name as category from sakila.film_category as fc
    join sakila.category as c 
    on fc.category_id = c.category_id
    join sakila.film as f
    on fc.film_id = f.film_id
    group by category 
    order by average_running_time DESC; 
    
    -- Display the top 10 most frequently rented movies in descending order. 
    
    SELECT 
    f.title AS movie_title, 
    COUNT(r.rental_id) AS rental_count
FROM 
    sakila.film AS f
JOIN 
    sakila.inventory AS i ON f.film_id = i.film_id
JOIN 
    sakila.rental AS r ON i.inventory_id = r.inventory_id
GROUP BY 
    f.title
ORDER BY 
    rental_count DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1 . 

     SELECT 
    COUNT(i.inventory_id) AS available_copies
FROM 
   sakila.film as f
JOIN 
    sakila.inventory as i ON f.film_id = i.film_id
JOIN 
    sakila.store  as s ON i.store_id = s.store_id
LEFT JOIN 
    sakila.rental as  r ON i.inventory_id = r.inventory_id
WHERE 
    f.title = 'Academy Dinosaur' 
    AND s.store_id = 1
GROUP BY 
    f.title;
    
    /*Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."*/
    
    SELECT 
    DISTINCT f.title,
    CASE 
        WHEN i.available_count > 0 THEN 'Available'
        ELSE 'NOT available'
    END AS availability_status
FROM 
    sakila.film  as f
LEFT JOIN (
    SELECT 
        film_id, 
        COUNT(inventory_id) AS available_count
    FROM 
        sakila.inventory as i
    GROUP BY 
        film_id
) i ON f.film_id = i.film_id
ORDER BY 
    f.title;
    

    
